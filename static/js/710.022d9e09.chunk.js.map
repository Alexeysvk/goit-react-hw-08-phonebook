{"version":3,"file":"static/js/710.022d9e09.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/Contacts.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","views/PhonebookPage/PhonebookPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"Contacts_contactsList__g3sDu\",\"title\":\"Contacts_title__-mq9F\",\"contactsItem\":\"Contacts_contactsItem__BY6RO\",\"contactText\":\"Contacts_contactText__RbcA9\",\"button\":\"Contacts_button__vUlqW\"};","import { useDispatch, useSelector } from 'react-redux';\nimport s from './Contacts.module.css';\nimport {\n  deleteContacts,\n  fetchContacts,\n  getVisibleContacts,\n} from '../../redux/phonebook/selectors';\nimport { useEffect } from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport { getIsLoggedIn } from '../../redux/auth/auth-selectors';\n\nexport default function Contacts() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const loggedIn = useSelector(getIsLoggedIn);\n\n  const onDeleteContactCard = id => {\n    dispatch(deleteContacts(id));\n  };\n\n  useEffect(() => {\n    if (!loggedIn) {\n      return navigate('/signIn');\n    }\n  }, [loggedIn, navigate]);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={s.contactsList}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.contactsItem} key={id}>\n          <span className={s.contactText}>\n            {name} : {number}\n          </span>\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContactCard(id)}\n            className={s.button}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"formWrap\":\"ContactForm_formWrap__LBMtj\",\"inputWrap\":\"ContactForm_inputWrap__XQBhT\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts, getContacts } from 'redux/phonebook/selectors';\nimport { Notify } from 'notiflix';\nimport s from './ContactForm.module.css';\n\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const formSubmit = e => {\n    e.preventDefault();\n    const repeatName = contacts.find(contact => {\n      return contact.name.toLowerCase() === name.toLowerCase();\n    });\n    if (!repeatName) {\n      Notify.success(`${name} is added in contacts`);\n      dispatch(addContacts({ name, number }));\n      setNumber('');\n      setName('');\n      return;\n    }\n    Notify.warning(`${name} is already in contacts`);\n  };\n\n  return (\n    <form onSubmit={formSubmit} className={s.formWrap}>\n      <label className={s.inputWrap}>\n        <span className={s.label}>Name</span>\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </label>\n      <label className={s.inputWrap}>\n        <span className={s.label}>Phone</span>\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          value={number}\n        />\n      </label>\n      <button className={s.button} type=\"sabmit\">Add Contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import s from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/phonebook/selectors';\nimport { filterChangeAction } from 'redux/phonebook/actions';\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n  const onFilterChange = e =>\n    dispatch(filterChangeAction(e.target.value));\n\n\n  return (\n    <div className={s.filterWrap}>\n      <label className={s.label}>\n        Find contact by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onChange={onFilterChange}\n          value={value}\n          className={s.input}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;","import Contacts from '../../components/Contacts/Contacts';\nimport Phonebook from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter';\n\nexport default function PhonebookPage() {\n  return (\n    <section>\n      <Phonebook />\n      <Filter />\n      <Contacts />\n    </section>\n  );\n}"],"names":["Contacts","contacts","useSelector","getVisibleContacts","dispatch","useDispatch","navigate","useNavigate","loggedIn","getIsLoggedIn","useEffect","fetchContacts","className","s","map","id","name","number","type","onClick","deleteContacts","onDeleteContactCard","useState","setName","setNumber","getContacts","handleChange","e","currentTarget","value","onSubmit","preventDefault","find","contact","toLowerCase","Notify","addContacts","pattern","title","required","onChange","getFilter","filterChangeAction","target","PhonebookPage"],"sourceRoot":""}